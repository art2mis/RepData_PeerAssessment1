a <- available.packages()
head(rownames(a),3) ## Shcw the names of the first few packages
head(rownames(a),30) ## Shcw the names of the first few packages
install.packages("slidify")
install.packages(c("slidify","ggplot2","devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures","AnnotationDbi"))
library(ggplot2)
search()
q()
q()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "51d99acc093e51081182",
secret = "d45288c68a29a20d98c99cca47c43dfd33ce7466")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
install.packages("httpuv")
install.packages("httpuv")
setRepositories()
install.packages("httpuv")
chooseCRANmirror()
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "51d99acc093e51081182",
secret = "d45288c68a29a20d98c99cca47c43dfd33ce7466")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/user/repos"))
stop_for_status(req)
q()
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X
X[sample(1:5,]; X$var[c(1,3)] = NA
X[sample(1:5),]; X$var[c(1,3)] = NA
X[sample(1:5),]; X$var2[c(1,3)] = NA
X[c(1,3),]
library(dplyr)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(dplyr)
options(width=105)
chicago <- readRDS("chicago.rds")
exit
q()
setwd("E:/CourseraCollatoral/RepData_PeerAssessment1/RepData_PeerAssessment1")
if (!file.exists("activity.csv"))
{}
if (!file.exists("activity.csv")) {dataFile <- unzip("activity.zip")}
activityData <- read.csv("activity.csv", header=TRUE)
summary(activityData)
str(activityData)
activityData$dateClass <- strptime(activityData$date, format="%m/%d/%Y")
str(activityData)
View(activityData)
activityData$dateClass <- strptime(activityData$date)
activityData$dateClass <- strptime(activityData$date, format="%Y-%m-%d")
View(activityData)
str(activityData)
aggregate(steps ~ date, data=activityData, sum)
stepsByDay <- aggregate(steps ~ date, data=activityData, sum)
hist(stepsByDay)
hist(stepsByDay$steps, breaks=stepsByDay$date)
stepsByDay <- aggregate(steps ~ dateClass, data=activityData, sum)
stepsByDay <- aggregate(steps ~ date, data=activityData, sum)
View(stepsByDay)
stepsByDay2 <- tapploy(activityData$steps, activityData$dateClass, FUN=sum)
stepsByDay2 <- tapply(activityData$steps, activityData$dateClass, FUN=sum)
stepsByDay2 <- tapply(activityData$steps, activityData$date, FUN=sum)
plot(x=names(stepsByDay2), y=stepsByDay2, type="h", xlab="Date", ylab="Steps")
plot(x=names(stepsByDay2), y=stepsByDay2, type="l", xlab="Date", ylab="Steps")
stepsByDay2
View(stepsByDay)
load(ggplot2)
library(ggplot2)
qplot(steps, data=stepsByDay, geom="histogram")
qplot(steps, data=stepsByDay, geom="histogram", binwidth=1)
qplot(steps, data=stepsByDay, geom="histogram")
View(stepsByDay)
library(lattice)
histogram(steps, stepsByDay)
histogram(steps ~ day, data=stepsByDay)
histogram(steps ~ date, data=stepsByDay)
histogram(~ steps | date, data=stepsByDay)
histogram(~ steps, data=stepsByDay)
histogram(date ~ steps, data=stepsByDay)
histogram(~ date, data=stepsByDay)
histogram(date ~ steps, data=stepsByDay)
plot()
histogram(date ~ steps, data=stepsByDay)
stepsByDay
stepsByDay2 <- tapply(activityData$steps, activityData$date, FUN=mean)
stepsByDay$meanSteps <- tapply(activityData$steps, activityData$date, FUN=mean)
stepsByDay
stepsByDay2
mean(stepsByDay$steps)
